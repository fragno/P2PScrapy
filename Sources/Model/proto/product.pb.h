// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product.proto

#ifndef PROTOBUF_product_2eproto__INCLUDED
#define PROTOBUF_product_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace p2pscrapy {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_product_2eproto();
void protobuf_AssignDesc_product_2eproto();
void protobuf_ShutdownFile_product_2eproto();

class Product;

// ===================================================================

class Product : public ::google::protobuf::Message {
 public:
  Product();
  virtual ~Product();

  Product(const Product& from);

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Product& default_instance();

  void Swap(Product* other);

  // implements Message ----------------------------------------------

  Product* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline float rate() const;
  inline void set_rate(float value);

  // required float duration = 3;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline float duration() const;
  inline void set_duration(float value);

  // required float amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline float amount() const;
  inline void set_amount(float value);

  // required string source = 5;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 5;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:p2pscrapy.Product)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float rate_;
  float duration_;
  ::std::string* source_;
  float amount_;
  friend void  protobuf_AddDesc_product_2eproto();
  friend void protobuf_AssignDesc_product_2eproto();
  friend void protobuf_ShutdownFile_product_2eproto();

  void InitAsDefaultInstance();
  static Product* default_instance_;
};
// ===================================================================


// ===================================================================

// Product

// required string name = 1;
inline bool Product::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Product::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Product::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Product::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Product::name() const {
  // @@protoc_insertion_point(field_get:p2pscrapy.Product.name)
  return *name_;
}
inline void Product::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:p2pscrapy.Product.name)
}
inline void Product::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:p2pscrapy.Product.name)
}
inline void Product::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2pscrapy.Product.name)
}
inline ::std::string* Product::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:p2pscrapy.Product.name)
  return name_;
}
inline ::std::string* Product::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Product::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:p2pscrapy.Product.name)
}

// required float rate = 2;
inline bool Product::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Product::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Product::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Product::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float Product::rate() const {
  // @@protoc_insertion_point(field_get:p2pscrapy.Product.rate)
  return rate_;
}
inline void Product::set_rate(float value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:p2pscrapy.Product.rate)
}

// required float duration = 3;
inline bool Product::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Product::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Product::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Product::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float Product::duration() const {
  // @@protoc_insertion_point(field_get:p2pscrapy.Product.duration)
  return duration_;
}
inline void Product::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:p2pscrapy.Product.duration)
}

// required float amount = 4;
inline bool Product::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Product::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Product::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Product::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline float Product::amount() const {
  // @@protoc_insertion_point(field_get:p2pscrapy.Product.amount)
  return amount_;
}
inline void Product::set_amount(float value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:p2pscrapy.Product.amount)
}

// required string source = 5;
inline bool Product::has_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Product::set_has_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Product::clear_has_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Product::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& Product::source() const {
  // @@protoc_insertion_point(field_get:p2pscrapy.Product.source)
  return *source_;
}
inline void Product::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:p2pscrapy.Product.source)
}
inline void Product::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:p2pscrapy.Product.source)
}
inline void Product::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p2pscrapy.Product.source)
}
inline ::std::string* Product::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:p2pscrapy.Product.source)
  return source_;
}
inline ::std::string* Product::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Product::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:p2pscrapy.Product.source)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2pscrapy

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_product_2eproto__INCLUDED
